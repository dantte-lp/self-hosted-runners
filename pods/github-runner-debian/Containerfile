# ============================================================================
# GitHub Actions Self-Hosted Runner for ocserv-agent
# Base: Python 3.14 on Debian Trixie (Python уже установлен и оптимизирован)
# ============================================================================
FROM python:3.14-trixie

# ============================================================================
# Install base dependencies and Docker
# ============================================================================
RUN apt-get update && apt-get install -y --no-install-recommends \
        # Base tools
        curl \
        git \
        jq \
        sudo \
        ca-certificates \
        wget \
        zip \
        unzip \
        rsync \
        gh \
        # Build tools
        build-essential \
        cmake \
        clang \
        llvm \
        # Autotools (для ocserv и других C проектов)
        autoconf \
        automake \
        libtool \
        m4 \
        # Дополнительные C/C++ инструменты (только необходимые)
        gdb \
        strace \
        # Docker for container actions
        docker.io \
        # Network tools
        iputils-ping \
        openssh-client \
        # Development libraries
        libssl-dev \
        libcurl4-openssl-dev \
        libgnutls28-dev \
        pkg-config \
        # Библиотеки для ocserv и VPN разработки
        libreadline-dev \
        libpam0g-dev \
        liblz4-dev \
        libseccomp-dev \
        libwrap0-dev \
        libprotobuf-c-dev \
        libev-dev \
        libhttp-parser-dev \
        libtalloc-dev \
        # Linters
        shellcheck \
        # DEB packaging tools
        debhelper \
        devscripts \
        fakeroot \
        dpkg-dev \
        dh-make \
        lintian \
        debootstrap \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# ============================================================================
# Install Poetry 2.2
# ============================================================================
RUN curl -sSL https://install.python-poetry.org | python3 - && \
    ln -s /root/.local/bin/poetry /usr/local/bin/poetry && \
    rm -rf /tmp/* /root/.cache/*

# ============================================================================
# Install Node.js 25 (from NodeSource)
# ============================================================================
RUN curl -fsSL https://deb.nodesource.com/setup_25.x | bash - && \
    apt-get install -y --no-install-recommends nodejs && \
    npm install -g npm@latest yarn pnpm && \
    npm cache clean --force && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /root/.npm

# ============================================================================
# Install Go 1.25.1
# ============================================================================
RUN curl -fsSL -o go1.25.1.linux-amd64.tar.gz https://go.dev/dl/go1.25.1.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go1.25.1.linux-amd64.tar.gz && \
    rm go1.25.1.linux-amd64.tar.gz

ENV PATH="/usr/local/go/bin:${PATH}"
ENV GOPATH="/go"

# ============================================================================
# Install protoc (Protocol Buffers compiler)
# ============================================================================
ARG PROTOC_VERSION="33.0"
RUN curl -fsSL -o protoc-${PROTOC_VERSION}-linux-x86_64.zip \
        https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-x86_64.zip && \
    unzip protoc-${PROTOC_VERSION}-linux-x86_64.zip -d /usr/local && \
    rm protoc-${PROTOC_VERSION}-linux-x86_64.zip

# Install protoc-gen-go and protoc-gen-go-grpc
RUN go install google.golang.org/protobuf/cmd/protoc-gen-go@latest && \
    go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

ENV PATH="${GOPATH}/bin:${PATH}"

# ============================================================================
# Install .NET SDK 8.0
# ============================================================================
RUN curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o /usr/share/keyrings/microsoft-prod.gpg && \
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/debian/12/prod bookworm main" > /etc/apt/sources.list.d/microsoft-prod.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends dotnet-sdk-8.0 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /root/.dotnet

# ============================================================================
# Install SDKMAN and JVM tools (https://sdkman.io/)
# Manages Java, Gradle, Maven, Kotlin, Scala, and more
# ============================================================================

# Install SDKMAN
RUN curl -s "https://get.sdkman.io" | bash && \
    bash -c "source /root/.sdkman/bin/sdkman-init.sh && \
    # Install GraalVM JDK 25 (includes Native Image support)
    sdk install java 25.0.1-graal && \
    # Install latest Gradle and Maven
    sdk install gradle 9.1.0 && \
    sdk install maven 3.9.11 && \
    # Install JVM languages for universal image
    sdk install kotlin 2.2.21 && \
    sdk install scala 3.7.3 && \
    # Install modern frameworks
    sdk install springboot 3.5.7 && \
    sdk install micronaut 4.10.0 && \
    # Install JBang for Java scripting
    sdk install jbang 0.132.1 && \
    # Clean SDKMAN cache
    sdk flush archives && \
    sdk flush temp" && \
    # Remove unnecessary files to reduce image size
    rm -rf /root/.sdkman/archives/* \
           /root/.sdkman/tmp/* \
           /tmp/* /var/tmp/*

# Set up environment for SDKMAN
ENV SDKMAN_DIR="/root/.sdkman"
ENV JAVA_HOME="/root/.sdkman/candidates/java/current"
ENV GRADLE_HOME="/root/.sdkman/candidates/gradle/current"
ENV M2_HOME="/root/.sdkman/candidates/maven/current"
ENV PATH="${JAVA_HOME}/bin:${GRADLE_HOME}/bin:${M2_HOME}/bin:${PATH}"

# Verify SDKMAN installations work
RUN bash -c "source /root/.sdkman/bin/sdkman-init.sh && \
    java -version && \
    gradle --version && \
    mvn --version && \
    kotlin -version && \
    scala -version"

# ============================================================================
# Install static analysis and security tools
# ============================================================================

# Go tools (install globally in GOPATH)
# SAST & Code Quality
RUN go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest && \
    go install honnef.co/go/tools/cmd/staticcheck@latest && \
    go install github.com/securego/gosec/v2/cmd/gosec@latest && \
    go install github.com/kisielk/errcheck@latest && \
    go install github.com/gordonklaus/ineffassign@latest && \
    go install golang.org/x/vuln/cmd/govulncheck@latest && \
    # Clean Go cache to reduce image size
    go clean -cache && \
    rm -rf /root/.cache/go-build /tmp/*

# Python tools (CLI tools installed globally)
RUN pip3 install --no-cache-dir \
        pylint \
        flake8 \
        black \
        mypy \
        bandit \
        safety \
        isort \
        ruff \
    && rm -rf /root/.cache/pip

# C/C++ tools
RUN apt-get update && apt-get install -y --no-install-recommends \
        cppcheck \
        clang-tidy \
        valgrind \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# JavaScript/TypeScript tools (global npm packages)
RUN npm install -g \
    eslint \
    prettier \
    typescript \
    @typescript-eslint/parser \
    @typescript-eslint/eslint-plugin \
    && npm cache clean --force \
    && rm -rf /root/.npm /tmp/*

# Java tools (download standalone versions)
ARG CHECKSTYLE_VERSION="12.1.0"
ARG PMD_VERSION="7.17.0"
ARG SPOTBUGS_VERSION="4.9.8"

RUN mkdir -p /opt/java-tools && \
    # Checkstyle
    curl -fsSL -o /opt/java-tools/checkstyle.jar \
        https://github.com/checkstyle/checkstyle/releases/download/checkstyle-${CHECKSTYLE_VERSION}/checkstyle-${CHECKSTYLE_VERSION}-all.jar && \
    # PMD
    curl -fsSL -o pmd.zip \
        https://github.com/pmd/pmd/releases/download/pmd_releases%2F${PMD_VERSION}/pmd-dist-${PMD_VERSION}-bin.zip && \
    unzip -q pmd.zip -d /opt/java-tools && \
    mv /opt/java-tools/pmd-bin-${PMD_VERSION} /opt/java-tools/pmd && \
    rm pmd.zip && \
    # SpotBugs
    curl -fsSL -o spotbugs.tgz \
        https://github.com/spotbugs/spotbugs/releases/download/${SPOTBUGS_VERSION}/spotbugs-${SPOTBUGS_VERSION}.tgz && \
    tar -xzf spotbugs.tgz -C /opt/java-tools && \
    mv /opt/java-tools/spotbugs-${SPOTBUGS_VERSION} /opt/java-tools/spotbugs && \
    rm spotbugs.tgz && \
    # Remove unnecessary files to reduce size
    rm -rf /opt/java-tools/pmd/docs \
           /opt/java-tools/spotbugs/doc \
           /tmp/* /var/tmp/* && \
    # Create wrapper scripts
    echo '#!/bin/bash\njava -jar /opt/java-tools/checkstyle.jar "$@"' > /usr/local/bin/checkstyle && \
    chmod +x /usr/local/bin/checkstyle

ENV PATH="/opt/java-tools/pmd/bin:/opt/java-tools/spotbugs/bin:${PATH}"

# Universal tools and linters
RUN apt-get update && apt-get install -y --no-install-recommends \
        yamllint \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    # Install hadolint (Dockerfile linter)
    curl -fsSL -o /usr/local/bin/hadolint \
        https://github.com/hadolint/hadolint/releases/download/v2.14.0/hadolint-Linux-x86_64 && \
    chmod +x /usr/local/bin/hadolint && \
    # Install markdownlint-cli
    npm install -g markdownlint-cli && \
    npm cache clean --force && \
    rm -rf /root/.npm /tmp/*

# ============================================================================
# Install security scanning and supply chain tools (OSSF/SLSA/SBOM)
# ============================================================================

# Define versions
ARG SCORECARD_VERSION="5.3.0"
ARG SYFT_VERSION="v1.34.2"
ARG GRYPE_VERSION="v0.101.1"
ARG COSIGN_VERSION="v3.0.2"
ARG GITLEAKS_VERSION="8.28.0"
ARG TRUFFLEHOG_VERSION="3.90.3"

# Install all security tools in one layer to reduce image size
RUN set -eux && \
    # Trivy (container/dependency security scanner)
    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin && \
    # OSSF Scorecard (project security health metrics)
    curl -fsSL -o scorecard.tar.gz \
        https://github.com/ossf/scorecard/releases/download/v${SCORECARD_VERSION}/scorecard_${SCORECARD_VERSION}_linux_amd64.tar.gz && \
    tar -xzf scorecard.tar.gz -C /usr/local/bin scorecard && \
    rm scorecard.tar.gz && \
    chmod +x /usr/local/bin/scorecard && \
    # Syft (SBOM generation tool)
    curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin ${SYFT_VERSION} && \
    # Grype (vulnerability scanner)
    curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin ${GRYPE_VERSION} && \
    # Cosign (container signing)
    curl -fsSL -o /usr/local/bin/cosign \
        https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64 && \
    chmod +x /usr/local/bin/cosign && \
    # Gitleaks (secrets detection)
    curl -fsSL -o gitleaks.tar.gz \
        https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz && \
    tar -xzf gitleaks.tar.gz -C /usr/local/bin gitleaks && \
    rm gitleaks.tar.gz && \
    chmod +x /usr/local/bin/gitleaks && \
    # TruffleHog (secrets detection with verification)
    curl -fsSL -o trufflehog.tar.gz \
        https://github.com/trufflesecurity/trufflehog/releases/download/v${TRUFFLEHOG_VERSION}/trufflehog_${TRUFFLEHOG_VERSION}_linux_amd64.tar.gz && \
    tar -xzf trufflehog.tar.gz -C /usr/local/bin trufflehog && \
    rm trufflehog.tar.gz && \
    chmod +x /usr/local/bin/trufflehog && \
    # Clean up
    rm -rf /tmp/* /var/tmp/*

# Install Go-based security tools
RUN go install github.com/google/osv-scanner/v2/cmd/osv-scanner@latest && \
    go install github.com/sonatype-nexus-community/nancy@latest && \
    go install github.com/google/go-licenses@latest && \
    # Clean Go cache to reduce image size
    go clean -cache -modcache && \
    rm -rf /root/.cache/go-build

# Install Semgrep (multi-language SAST tool)
RUN pip3 install --no-cache-dir semgrep && \
    rm -rf /root/.cache/pip

# ============================================================================
# Create runner user
# ============================================================================
RUN useradd -m -s /bin/bash runner && \
    usermod -aG sudo runner && \
    usermod -aG docker runner && \
    echo "runner ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# ============================================================================
# Set working directory
# ============================================================================
WORKDIR /home/runner

# ============================================================================
# Download and install GitHub Actions runner
# ============================================================================
ARG RUNNER_VERSION="2.329.0"
RUN curl -o actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz \
    -L https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz && \
    tar xzf actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz && \
    rm actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz

# Install runner dependencies
RUN cd /home/runner && ./bin/installdependencies.sh && \
    # Clean up after installation
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Fix GOPATH permissions for go install commands and create work directory
RUN mkdir -p /go/pkg/mod/cache /home/runner/_work && \
    chown -R runner:runner /go /home/runner && \
    chmod -R 755 /go /home/runner/_work

# ============================================================================
# Configure runner environment
# ============================================================================
USER runner

# Ensure Poetry is in runner's PATH
RUN echo 'export PATH="/root/.local/bin:$PATH"' >> ~/.bashrc

# ============================================================================
# Copy and configure entrypoint
# ============================================================================
USER root
COPY entrypoint.sh /home/runner/entrypoint.sh
RUN chmod +x /home/runner/entrypoint.sh

USER runner

ENTRYPOINT ["/home/runner/entrypoint.sh"]
